{"version":3,"sources":["js/timer.js"],"names":["CountdownTimer","constructor","selector","targetDate","document","querySelector","Date","startCountdown","intervalId","setInterval","currentTime","leftTime","timeCounter","includTimeIntoMarckup","stopCountdown","days","Math","floor","hours","mins","secs","refs","minutes","seconds","textContent","pad","clearInterval","value","String","padStart","countdownTimer"],"mappings":";AAAA,MAAMA,EACJC,YAAYC,EAAUC,GACfD,KAAAA,SAAWE,SAASC,cAAcH,GAClCC,KAAAA,WAAa,IAAIG,KAAKH,GAG7BI,iBACOC,KAAAA,WAAaC,YAAY,KACvBC,KAAAA,YAAc,IAAIJ,KAClBK,KAAAA,SAAW,KAAKR,WAAa,KAAKO,YAClCE,KAAAA,cAAe,KAAKC,wBACrB,KAAKF,SAAW,GACbG,KAAAA,iBAEN,KAGLF,cACOG,KAAAA,KAAOC,KAAKC,MAAM,KAAKN,SAAY,OACnCO,KAAAA,MAAQF,KAAKC,MACf,KAAKN,SAAY,MAAyB,MAExCQ,KAAAA,KAAOH,KAAKC,MACd,KAAKN,SAAY,KAAoB,KAEnCS,KAAAA,KAAOJ,KAAKC,MAAO,KAAKN,SAAY,IAAc,KAGzDE,wBACOQ,KAAAA,KAAO,CACVN,KAAMX,SAASC,cAAc,sBAC7Ba,MAAOd,SAASC,cAAc,uBAC9BiB,QAASlB,SAASC,cAAc,sBAChCkB,QAASnB,SAASC,cAAc,uBAE7BgB,KAAAA,KAAKN,KAAKS,YAAc,KAAKC,IAAI,KAAKV,MACtCM,KAAAA,KAAKH,MAAMM,YAAc,KAAKC,IAAI,KAAKP,OACvCG,KAAAA,KAAKC,QAAQE,YAAc,KAAKC,IAAI,KAAKN,MACzCE,KAAAA,KAAKE,QAAQC,YAAc,KAAKC,IAAI,KAAKL,MAEhDN,gBACEY,cAAc,KAAKlB,YACdG,KAAAA,SAAW,EACXC,KAAAA,YAAY,KAAKD,UACjBE,KAAAA,sBAAsB,KAAKF,UAGlCc,IAAIE,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAiB,IAAI9B,EAAe,WAAY,2BACtD8B,EAAevB","file":"timer.38396e98.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor(selector, targetDate) {\n    this.selector = document.querySelector(selector);\n    this.targetDate = new Date(targetDate);\n  }\n\n  startCountdown() {\n    this.intervalId = setInterval(() => {\n      this.currentTime = new Date();\n      this.leftTime = this.targetDate - this.currentTime;\n      this.timeCounter(), this.includTimeIntoMarckup();\n      if (this.leftTime < 0) {\n        this.stopCountdown();\n      }\n    }, 1000);\n  }\n\n  timeCounter() {\n    this.days = Math.floor(this.leftTime / (1000 * 60 * 60 * 24));\n    this.hours = Math.floor(\n      (this.leftTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    this.mins = Math.floor(\n      (this.leftTime % (1000 * 60 * 60)) / (1000 * 60)\n    );\n    this.secs = Math.floor((this.leftTime % (1000 * 60)) / 1000);\n  }\n\n  includTimeIntoMarckup() {\n    this.refs = {\n      days: document.querySelector(\" [data-value=days]\"),\n      hours: document.querySelector(\" [data-value=hours]\"),\n      minutes: document.querySelector(\" [data-value=mins]\"),\n      seconds: document.querySelector(\" [data-value=secs]\")\n    };\n    this.refs.days.textContent = this.pad(this.days);\n    this.refs.hours.textContent = this.pad(this.hours);\n    this.refs.minutes.textContent = this.pad(this.mins);\n    this.refs.seconds.textContent = this.pad(this.secs);\n  }\n  stopCountdown() {\n    clearInterval(this.intervalId);\n    this.leftTime = 0;\n    this.timeCounter(this.leftTime);\n    this.includTimeIntoMarckup(this.leftTime);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n}\n\nconst countdownTimer = new CountdownTimer(\"#timer-1\", \"October 25, 2022, 11:15\");\ncountdownTimer.startCountdown();\n"]}